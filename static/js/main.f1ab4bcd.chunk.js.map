{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","newItem","list","this","hydrateStateWithLocalStorage","window","addEventListener","saveStateToLocalStorage","bind","removeEventListener","key","localStorage","hasOwnProperty","value","getItem","JSON","parse","setState","e","setItem","stringify","id","Math","random","console","log","push","updatedList","filter","item","className","type","placeholder","onChange","updateInput","target","style","width","height","onClick","addItem","map","deleteItem","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4QAmJeA,E,YAhJb,WAAYC,GAAQ,IAAD,8BAEjB,4CAAMA,KAEDC,MAAQ,CACXC,QAAS,GACTC,KAAM,IANS,E,iFAcjBC,KAAKC,+BAGLC,OAAOC,iBAEL,eACAH,KAAKI,wBAAwBC,KAAKL,S,6CAMpCE,OAAOI,oBACL,eACAN,KAAKI,wBAAwBC,KAAKL,OAGpCA,KAAKI,4B,qDAKL,IAAK,IAAIG,KAAOP,KAAKH,MAEnB,GAAIW,aAAaC,eAAeF,GAAM,CAEpC,IAAIG,EAAQF,aAAaG,QAAQJ,GAGjC,IACEG,EAAQE,KAAKC,MAAMH,GACnBV,KAAKc,SAAL,eAAiBP,EAAMG,IACvB,MAAOK,GAEPf,KAAKc,SAAL,eAAiBP,EAAMG,Q,gDAQ7B,IAAK,IAAIH,KAAOP,KAAKH,MAEnBW,aAAaQ,QAAQT,EAAKK,KAAKK,UAAUjB,KAAKH,MAAMU,O,kCAI5CA,EAAKG,GAGfV,KAAKc,SAAL,eACGP,EAAMG,M,gCAMT,IAAMZ,EAAU,CACdoB,GAAI,EAAIC,KAAKC,SACbV,MAAOV,KAAKH,MAAMC,SAGpBuB,QAAQC,IAAIxB,EAAQoB,IAGpB,IAAMnB,EAAI,YAAOC,KAAKH,MAAME,MAG5BA,EAAKwB,KAAKzB,GAIVE,KAAKc,SAAS,CACZf,OACAD,QAAS,O,iCAKFoB,GAET,IAGMM,EAHI,YAAOxB,KAAKH,MAAME,MAGH0B,QAAO,SAAAC,GAAI,OAAIA,EAAKR,KAAOA,KAEpDlB,KAAKc,SAAS,CAAEf,KAAMyB,M,+BAId,IAAD,OACP,OACE,yBAAKG,UAAU,OACb,6BACE,uEACA,yBAAKA,UAAU,eACb,2BAAOA,UAAU,eACfC,KAAK,OACLC,YAAY,kBACZnB,MAAOV,KAAKH,MAAMC,QAElBgC,SAAU,SAAAf,GAAC,OAAI,EAAKgB,YAAY,UAAWhB,EAAEiB,OAAOtB,QACpDuB,MAAO,CAACC,MAAO,MAAOC,OAAQ,UAIhC,4BAAQR,UAAU,kBAAkBS,QAAS,kBAAM,EAAKC,WACxDJ,MAAO,CAACC,MAAO,QADf,QAIF,wBAAIP,UAAU,cAEX3B,KAAKH,MAAME,KAAKuC,KAAI,SAAAZ,GACnB,OACE,wBAAIC,UAAU,8BAA8BpB,IAAKmB,EAAKR,IACpD,2BAAIQ,EAAKhB,OACT,4BAAQiB,UAAU,kBAAkBS,QAAS,kBAAM,EAAKG,WAAWb,EAAKR,KACxEe,MAAO,CAACC,MAAO,QADf,oB,GApIAM,aCUEC,QACW,cAA7BvC,OAAOwC,SAASC,UAEe,UAA7BzC,OAAOwC,SAASC,UAEhBzC,OAAOwC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f1ab4bcd.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass App extends Component {\n  constructor(props) {\n    // When you pass props to super, the props get assigned to 'this'\n    super(props);\n    // this.state is the buildiing block of the data that gets used\n    this.state = {\n      newItem: '',\n      list: []\n    }\n  }\n\n  // component mounted means when component is injected into DOM tree\n  componentDidMount() {\n    //incorporating local storage so data survives a full browser restart\n    // note: session storage saved data survives just a page refresh\n    this.hydrateStateWithLocalStorage();\n    // add event listener to save state to localStorage\n    // when user leaves/refreshes the page \n    window.addEventListener(\n      // \"beforeunload\" means before leaving the current page\n      \"beforeunload\",\n      this.saveStateToLocalStorage.bind(this)\n    );\n  }\n\n  // unmount is a function called immediately before the component is ended/destroyed \n  componentWillUnmount() {\n    window.removeEventListener(\n      \"beforeunload\",\n      this.saveStateToLocalStorage.bind(this)\n    );\n    // saves data to local storage if component successfully unmounts\n    this.saveStateToLocalStorage();\n  }\n\n  hydrateStateWithLocalStorage() {\n    // for loop through all items in state\n    for (let key in this.state) {\n      // if 'key' (our random id number) exists in localStorage\n      if (localStorage.hasOwnProperty(key)) {\n        // get the key's value from localStorage\n        let value = localStorage.getItem(key);\n\n        // parse the localStorage string (data saved) and setState\n        try {\n          value = JSON.parse(value);\n          this.setState({ [key]: value });\n        } catch (e) {\n          // handle empty string\n          this.setState({ [key]: value });\n        }\n      }\n    }\n  }\n\n  saveStateToLocalStorage() {\n    // for loop through every item in React state to rewrite our list\n    for (let key in this.state) {\n      // save to localStorage\n      localStorage.setItem(key, JSON.stringify(this.state[key]));\n    }\n  }\n\n  updateInput(key, value) {\n    // update react state with input data,\n    // the key = random unique id and also string added from input\n    this.setState({\n      [key]: value\n    })\n  }\n\n  addItem() {\n    // create item with unique id using math random\n    const newItem = {\n      id: 1 + Math.random(),\n      value: this.state.newItem\n    };\n    // console log shows us the random number out of curiosity\n    console.log(newItem.id);\n\n    // copy of current item list\n    const list = [...this.state.list];\n\n    // add new item to list \n    list.push(newItem);\n\n    // update state with new list then\n    //  reset newItem input after last 'newItem' has been processed\n    this.setState({\n      list,\n      newItem: ''\n    })\n  }\n\n  // id of line selected is passed through as parameter into function\n  deleteItem(id) {\n    // copy up to date list of items into function scope \n    const list = [...this.state.list];\n    // to 'filter' out item to delete, i.e. new variable stores all \n    // items that do not match selected id to erase \n    const updatedList = list.filter(item => item.id !== id);\n    // to set state of list with updated list \n    this.setState({ list: updatedList });\n  }\n\n  // We render and return what we want to show on the view screen \n  render() {\n    return (\n      <div className=\"App\">\n        <div>\n          <h3>Add tasks that still need to be done...</h3>\n          <div className='inputAndBtn'>\n            <input className='form-control'\n              type='text'\n              placeholder='Input item here'\n              value={this.state.newItem}\n              // Value being typed goes into newItem via updateInput function \n              onChange={e => this.updateInput('newItem', e.target.value)}\n              style={{width: '70%', height: '52px'}}\n            />\n            {/* addItem function creates the newItem, pushes it into list array */}\n            {/* There is no POST of this data because of technique used above */}\n            <button className='btn btn-primary' onClick={() => this.addItem()}\n            style={{width: '30%'}}>Add</button>\n          </div>\n\n          <ul className='list-group'>\n            {/* List array is mapped through, creating a new item for each item in the array */}\n            {this.state.list.map(item => {\n              return (\n                <li className='list-group-item inputAndBtn' key={item.id}>\n                  <p>{item.value}</p>\n                  <button className='btn btn-success' onClick={() => this.deleteItem(item.id)}\n                  style={{width: '30%'}}>Done!</button>\n                </li>\n              )\n            })}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}